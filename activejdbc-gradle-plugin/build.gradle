import org.apache.tools.ant.taskdefs.condition.Os

group 'org.javalite'
version '1.4.12-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'maven'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
    maven { url 'http://repo.javalite.io' }
}

configurations {
    deployerJars
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile group: 'org.javalite', name: 'activejdbc', version: "${project.version}"
    compile group: 'org.javalite', name: 'activejdbc-instrumentation', version: "${project.version}"

    deployerJars group: 'org.apache.maven.wagon', name: 'wagon-http', version: '2.2'
}

task docJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from 'build/docs/groovydoc'
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// copy the compiled classes into the maven output dir so it can assemble the jar
task moveClasses(type: Copy, dependsOn: 'compileGroovy') {
    from sourceSets.main.output
    into 'target/classes'
}

task moveJars(type: Copy, dependsOn: ['docJar', 'sourceJar']) {
    from "$buildDir/libs"
    into 'target'

    // exclude the main jar, we need to let maven assemble it in order for the pom to be included
    exclude jar.archivePath.name
}

clean {
    delete 'target'
}

artifacts {
    archives jar
    archives docJar
    archives sourceJar
}

build.dependsOn << ['testPluginSubproject', 'moveJars', 'moveClasses']

task testDaemonBuild1(type: TestProjectBuild) {
    useDaemon = true
}

task testDaemonBuild2(type: TestProjectBuild) {
    useDaemon = true
}

task testNormalBuild1(type: TestProjectBuild) {}
task testNormalBuild2(type: TestProjectBuild) {}

task testPluginSubproject(dependsOn: ['test', 'install', 'testDaemonBuild1', 'testDaemonBuild2', 'testNormalBuild1', 'testNormalBuild2'])

class TestProjectBuild extends Exec {

    boolean useDaemon = false

    TestProjectBuild() {
        workingDir = 'test-project'
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            executable = '../gradlew.bat'
        } else {
            executable = '../gradlew'
        }
    }

    @Override
    protected void exec() {
        def daemonArg = (useDaemon) ? '--daemon' : '--no-daemon'
        setArgs([daemonArg, '--stacktrace', "-Pactivejdbc.version=${project.version}", 'clean', 'test'])
        super.exec()
    }
}
